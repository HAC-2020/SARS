{"version":3,"sources":["components/Records.js","App.js","serviceWorker.js","index.js"],"names":["RecordItem","record","Records","useState","recordList","setRecordList","useEffect","axios","get","then","records","console","log","catch","err","data","map","className","key","_id","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sQAGMA,EAAa,SAAC,GAAe,EAAbC,QAiFPC,EA9BC,WAAO,IAAD,EACeC,mBAAS,MADxB,mBACdC,EADc,KACFC,EADE,KAarB,OAVAC,qBAAU,WACTC,IACEC,IADF,wDAEEC,MAAK,SAACC,GACNL,EAAcK,GACdC,QAAQC,IAAIF,MAEZG,OAAM,SAACC,GAAD,OAASH,QAAQC,IAAIE,QAC3B,IAEEV,EAIJ,6BACEA,EAAWW,KAAKC,KAAI,SAACf,GACrB,OACC,yBAAKgB,UAAU,YAAYC,IAAKjB,EAAOkB,KACtC,kBAAC,EAAD,CAAYlB,OAAQA,IACpB,kCARG,MC3CMmB,MArBf,WACC,OACC,yBAAKH,UAAU,aACd,yBAAKA,UAAU,kBACd,yBAAKA,UAAU,2BAAf,mBACA,yBAAKI,GAAG,iBAAiBJ,UAAU,4BAClC,kBAAC,EAAD,OAED,yBAAKA,UAAU,eACd,4BACCI,GAAG,YACHJ,UAAU,+BAFX,QAIM,uBAAGA,UAAU,6BCLJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.f2dec3fe.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst RecordItem = ({ record }) => {\r\n\treturn (\r\n\t\t// <div className=\"card\">\r\n\t\t// \t<div className=\"card-header\">\r\n\t\t<div className=\"alert alert-warning p-0 m-0\" role=\"alert\">\r\n\t\t\t<ul className=\"list-group container p-0\">\r\n\t\t\t\t<li\r\n\t\t\t\t\tclassName=\"list-group-item list-group-item-danger text-center\"\r\n\t\t\t\t\tstyle={{ background: \"#666666\" }}\r\n\t\t\t\t>\r\n\t\t\t\t\t{record.triageLevel}\r\n\t\t\t\t</li>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<ul\r\n\t\t\t\t\t\tclassName=\"list-group col-6 pr-0\"\r\n\t\t\t\t\t\tstyle={{ paddingLeft: \"15px\" }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<li className=\"list-group-item \">\r\n\t\t\t\t\t\t\tDisease (With the highest probability) :\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\t\t\t\tSymptoChecker use Date :\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\t\t\t\tSymptoChecker use Time :\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\t\t\t\tPatient Contact Number :\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t<ul\r\n\t\t\t\t\t\tclassName=\"list-group col-6\"\r\n\t\t\t\t\t\tstyle={{ paddingRight: \"15px\" }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<li className=\"list-group-item \">{record.disease}</li>\r\n\t\t\t\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\t\t\t\t{record.date.substring(0, 10)}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\t\t\t\t{record.date.substring(11, 16)} (GMT)\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"list-group-item\">{record.pin}</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t\t// \t</div>\r\n\t\t// </div>\r\n\t);\r\n};\r\n\r\nconst Records = () => {\r\n\tconst [recordList, setRecordList] = useState(null);\r\n\r\n\tuseEffect(() => {\r\n\t\taxios\r\n\t\t\t.get(`https://agile-reaches-72897.herokuapp.com/record/get`)\r\n\t\t\t.then((records) => {\r\n\t\t\t\tsetRecordList(records);\r\n\t\t\t\tconsole.log(records);\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(err));\r\n\t}, []);\r\n\r\n\tif (!recordList) {\r\n\t\treturn null;\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{recordList.data.map((record) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className=\"col-sm-12\" key={record._id}>\r\n\t\t\t\t\t\t<RecordItem record={record} />\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Records;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Records from \"./components/Records\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"card shadow-lg\">\n\t\t\t\t<div className=\"card-header text-center\">Symptom Checker</div>\n\t\t\t\t<div id=\"step-container\" className=\"card-block overflow-auto\">\n\t\t\t\t\t<Records />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"card-footer\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tid=\"next-step\"\n\t\t\t\t\t\tclassName=\"btn btn-primary float-right\"\n\t\t\t\t\t>\n\t\t\t\t\t\tNext <i className=\"fa fa-chevron-right\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}